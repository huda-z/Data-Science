{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wi6AeneCaVz1"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_diabetes\n",
        "diabetes = load_diabetes()\n",
        "X, y = diabetes.data, diabetes.target"
      ],
      "metadata": {
        "id": "-Q1uGQe_aZjD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "c7yTmSbkajS_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(data=X, columns=diabetes.feature_names)\n",
        "df['target'] = y\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "YhZxdmCharnp",
        "outputId": "ce86ae4a-fd20-4b30-9396-5d9c87809b37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        age       sex       bmi        bp        s1        s2        s3  \\\n",
              "0  0.038076  0.050680  0.061696  0.021872 -0.044223 -0.034821 -0.043401   \n",
              "1 -0.001882 -0.044642 -0.051474 -0.026328 -0.008449 -0.019163  0.074412   \n",
              "2  0.085299  0.050680  0.044451 -0.005670 -0.045599 -0.034194 -0.032356   \n",
              "3 -0.089063 -0.044642 -0.011595 -0.036656  0.012191  0.024991 -0.036038   \n",
              "4  0.005383 -0.044642 -0.036385  0.021872  0.003935  0.015596  0.008142   \n",
              "\n",
              "         s4        s5        s6  target  \n",
              "0 -0.002592  0.019907 -0.017646   151.0  \n",
              "1 -0.039493 -0.068332 -0.092204    75.0  \n",
              "2 -0.002592  0.002861 -0.025930   141.0  \n",
              "3  0.034309  0.022688 -0.009362   206.0  \n",
              "4 -0.002592 -0.031988 -0.046641   135.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5a8e8963-4f0a-456f-9521-a4b0ed6b31f7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>bp</th>\n",
              "      <th>s1</th>\n",
              "      <th>s2</th>\n",
              "      <th>s3</th>\n",
              "      <th>s4</th>\n",
              "      <th>s5</th>\n",
              "      <th>s6</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.038076</td>\n",
              "      <td>0.050680</td>\n",
              "      <td>0.061696</td>\n",
              "      <td>0.021872</td>\n",
              "      <td>-0.044223</td>\n",
              "      <td>-0.034821</td>\n",
              "      <td>-0.043401</td>\n",
              "      <td>-0.002592</td>\n",
              "      <td>0.019907</td>\n",
              "      <td>-0.017646</td>\n",
              "      <td>151.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.001882</td>\n",
              "      <td>-0.044642</td>\n",
              "      <td>-0.051474</td>\n",
              "      <td>-0.026328</td>\n",
              "      <td>-0.008449</td>\n",
              "      <td>-0.019163</td>\n",
              "      <td>0.074412</td>\n",
              "      <td>-0.039493</td>\n",
              "      <td>-0.068332</td>\n",
              "      <td>-0.092204</td>\n",
              "      <td>75.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.085299</td>\n",
              "      <td>0.050680</td>\n",
              "      <td>0.044451</td>\n",
              "      <td>-0.005670</td>\n",
              "      <td>-0.045599</td>\n",
              "      <td>-0.034194</td>\n",
              "      <td>-0.032356</td>\n",
              "      <td>-0.002592</td>\n",
              "      <td>0.002861</td>\n",
              "      <td>-0.025930</td>\n",
              "      <td>141.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.089063</td>\n",
              "      <td>-0.044642</td>\n",
              "      <td>-0.011595</td>\n",
              "      <td>-0.036656</td>\n",
              "      <td>0.012191</td>\n",
              "      <td>0.024991</td>\n",
              "      <td>-0.036038</td>\n",
              "      <td>0.034309</td>\n",
              "      <td>0.022688</td>\n",
              "      <td>-0.009362</td>\n",
              "      <td>206.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.005383</td>\n",
              "      <td>-0.044642</td>\n",
              "      <td>-0.036385</td>\n",
              "      <td>0.021872</td>\n",
              "      <td>0.003935</td>\n",
              "      <td>0.015596</td>\n",
              "      <td>0.008142</td>\n",
              "      <td>-0.002592</td>\n",
              "      <td>-0.031988</td>\n",
              "      <td>-0.046641</td>\n",
              "      <td>135.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a8e8963-4f0a-456f-9521-a4b0ed6b31f7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5a8e8963-4f0a-456f-9521-a4b0ed6b31f7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5a8e8963-4f0a-456f-9521-a4b0ed6b31f7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e56fc963-f174-4c59-bf04-9948d7c13053\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e56fc963-f174-4c59-bf04-9948d7c13053')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e56fc963-f174-4c59-bf04-9948d7c13053 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 442,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047644,\n        \"min\": -0.1072256316073538,\n        \"max\": 0.11072667545381144,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          0.038075906433423026,\n          -0.09269547780327612,\n          0.01991321417832592\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047665,\n        \"min\": -0.044641636506989144,\n        \"max\": 0.05068011873981862,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.044641636506989144,\n          0.05068011873981862\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047616,\n        \"min\": -0.09027529589850945,\n        \"max\": 0.17055522598064407,\n        \"num_unique_values\": 163,\n        \"samples\": [\n          0.008883414898524095,\n          -0.05470749746044306\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047596,\n        \"min\": -0.11239880254408448,\n        \"max\": 0.13204361674121307,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.03333707926361473,\n          0.02531523648988596\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04761904761904759,\n        \"min\": -0.12678066991651324,\n        \"max\": 0.15391371315651542,\n        \"num_unique_values\": 141,\n        \"samples\": [\n          0.041085578784023497,\n          0.08374011738825825\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047644,\n        \"min\": -0.11561306597939897,\n        \"max\": 0.19878798965729408,\n        \"num_unique_values\": 302,\n        \"samples\": [\n          0.07415490186505921,\n          0.07008397186179521\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047596,\n        \"min\": -0.10230705051741597,\n        \"max\": 0.18117906039727852,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          0.09281975309919192,\n          0.15908923357275687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047616,\n        \"min\": -0.0763945037500033,\n        \"max\": 0.18523444326019867,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          0.08670845052151895,\n          -0.024732934523729287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047616,\n        \"min\": -0.12609712083330468,\n        \"max\": 0.13359728192191356,\n        \"num_unique_values\": 184,\n        \"samples\": [\n          -0.07213275338232743,\n          -0.021395309255276825\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.047619047619047644,\n        \"min\": -0.13776722569000302,\n        \"max\": 0.13561183068907107,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          -0.01764612515980379,\n          -0.09634615654165846\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77.09300453299109,\n        \"min\": 25.0,\n        \"max\": 346.0,\n        \"num_unique_values\": 214,\n        \"samples\": [\n          310.0,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TkTahPBsa5LU",
        "outputId": "ba0b6fd8-a328-41b0-d0fb-657e4729c04d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(442, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.925, random_state=42)"
      ],
      "metadata": {
        "id": "Oip18eiGbGS1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UaG4kBNTbNBe",
        "outputId": "c8b8f855-4a2a-46e1-b11a-c1814fcd4fdf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(33, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler_X = StandardScaler()\n",
        "scaler_X.fit(X_train)\n",
        "X_train_st = scaler_X.transform(X_train)\n",
        "X_test_st = scaler_X.transform(X_test)\n",
        "\n",
        "scaler_y = StandardScaler()\n",
        "scaler_y.fit(y_train.reshape(-1, 1))\n",
        "y_train_st = scaler_y.transform(y_train.reshape(-1, 1)).flatten()\n",
        "y_test_st = scaler_y.transform(y_test.reshape(-1, 1)).flatten()"
      ],
      "metadata": {
        "id": "ytUTwbD8bPP2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "model_ols = LinearRegression()\n",
        "model_ols.fit(X_train_st, y_train_st)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "yu7R2gBcbs-m",
        "outputId": "8be2dff0-73b4-4c00-beb4-0c138a7adf4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Lasso, Ridge\n",
        "alpha_lasso = 0.1\n",
        "model_lasso = Lasso(alpha=alpha_lasso, tol=1.75e-01)\n",
        "model_lasso.fit(X_train_st, y_train_st)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "TF2cXSBEb2YU",
        "outputId": "763dcc36-bf8c-48b9-f406-78f04924cc45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso(alpha=0.1, tol=0.175)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(alpha=0.1, tol=0.175)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=0.1, tol=0.175)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "alpha_ridge = 0.1 # Penalty\n",
        "model_ridge = Ridge(alpha=alpha_ridge, tol=1.75e-01)\n",
        "model_ridge.fit(X_train_st, y_train_st)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "nnWWEArBb_VK",
        "outputId": "3a6a7977-1efb-404a-80cb-10f44458eaa0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ridge(alpha=0.1, tol=0.175)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge(alpha=0.1, tol=0.175)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.1, tol=0.175)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "I1V-Pfm5cFMo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions_ols = model_ols.predict(X_test_st)\n",
        "predictions_lasso = model_lasso.predict(X_test_st)\n",
        "predictions_ridge = model_ridge.predict(X_test_st)\n",
        "preds = pd.DataFrame({\n",
        "'Actual': y_test_st,\n",
        "'Predicted_OLS': predictions_ols,\n",
        "'Predicted_Lasso': predictions_lasso,\n",
        "'Predicted_Ridge': predictions_ridge\n",
        "})\n",
        "# Evaluate the model\n",
        "r2_ols = r2_score(preds['Actual'], preds['Predicted_OLS'])\n",
        "r2_lasso = r2_score(preds['Actual'], preds['Predicted_Lasso'])\n",
        "r2_ridge = r2_score(preds['Actual'], preds['Predicted_Ridge'])\n",
        "# Display the R2 score\n",
        "print(\"R2 values\")\n",
        "print(f\"- OLS regression: {r2_ols:.2f}\")\n",
        "print(f\"- Lasso regression: {r2_lasso:.2f}\")\n",
        "print(f\"- Ridge regression: {r2_ridge:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JwVJaxIicNtZ",
        "outputId": "115f169b-5945-45b0-d99a-3c54722ea8cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R2 values\n",
            "- OLS regression: 0.41\n",
            "- Lasso regression: 0.46\n",
            "- Ridge regression: 0.43\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coef_ols = pd.DataFrame({\n",
        "'Feature': diabetes.feature_names,\n",
        "'Coefficient': model_ols.coef_\n",
        "})\n",
        "coef_lasso = pd.DataFrame({\n",
        "'Feature': diabetes.feature_names,\n",
        "'Coefficient': model_lasso.coef_\n",
        "})\n",
        "coef_ridge = pd.DataFrame({\n",
        "'Feature': diabetes.feature_names,\n",
        "'Coefficient': model_ridge.coef_\n",
        "})\n",
        "# Add a column to identify the regression method\n",
        "coef_ols['Method'] = 'OLS'\n",
        "coef_lasso['Method'] = 'Lasso'\n",
        "coef_ridge['Method'] = 'Ridge'\n",
        "# Concatenate DataFrames for visualization\n",
        "coef_combined = pd.concat([coef_ols, coef_lasso, coef_ridge])"
      ],
      "metadata": {
        "id": "deBBTF1KcTya"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "# Create a FacetGrid with subplots based on 'Method'\n",
        "grid = sns.FacetGrid(coef_combined, row='Method', height=4, aspect=1.5)\n",
        "# Map the horizontal barplot onto the grid\n",
        "grid.map(sns.barplot, 'Coefficient', 'Feature', color='skyblue', order=diabetes.feature_names)\n",
        "# Add a title to each subplot\n",
        "grid.set_titles(col_template=\"{col_name}\")\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "# Show the"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "c3GMyingcd3Y",
        "outputId": "0537a3bf-cdfd-41fd-d554-d372707cb054"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x1200 with 3 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk4AAASlCAYAAABeClaOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACQ9ElEQVR4nOzde1hVdd7//9cWZYvi3iiFqbNnIx5x3Hh2MjSdJMgab4vswGgeqKnGLJUOao4kWmIeCkerKZ0yy6m7m3Q6eYwiS+8gE71LiTQlzbCcVLaibgTW749+7u8QKksC92b7fFzXui7X+qz1We8PV9fV6/qsz17LYhiGIQAAAFSrga8LAAAAqC8ITgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASwQkAAMAkghMAAIBJBCcAAACTCE4A/NKgQYM0ceLEWu93xowZ6t69e633C+DSQHACcEHGjBkji8Wie++9t0rbfffdJ4vFojFjxpjuLzs7WxaLRUePHq29Iv3Ayy+/rD59+qhJkyZq1qyZBg4cqHfffbfSOdWN/cSJE5o6daratWunxo0b6/LLL9fAgQP11ltvXYQRADgbghOAC+ZwOPT666/r5MmT3mOnTp3SP//5T/32t7/1YWX+4aGHHtI999yj2267Tf/3f/+n3Nxc9e/fX8OGDdPixYtN93Pvvfdq5cqVWrRokb766iutXbtWw4cP108//VSH1QM4H4ITgAvWs2dPORwOrVy50nts5cqV+u1vf6sePXpUOreiokLp6elq27atQkJC1K1bN2VmZkqSCgsL9Yc//EGS1Lx58yqzVRUVFXrkkUfUokULXXHFFZoxY0alvvft26dhw4YpNDRUNptNt956q3744YdK58yZM0ctW7ZUs2bNdOedd+rUqVO1+Jeo6tNPP9WCBQs0b948PfTQQ2rfvr2io6P1xBNPaOLEiUpJSdH+/ftN9fX222/r0Ucf1fXXX6/IyEj16tVL999/v5KTk+t0DADOjeAEoEaSk5P10ksvefdffPFFjR07tsp56enpWr58uf7+979rx44dmjRpkkaOHKmPPvpIDodDb775piSpoKBARUVFWrhwoffal19+WU2bNlVOTo7mzp2rmTNnasOGDZJ+DlXDhg3T4cOH9dFHH2nDhg3as2ePbrvtNu/1b7zxhmbMmKHZs2dry5YtatWqlZ599tlqxxYaGnre7WyPKc947bXXFBoaqnvuuadK24MPPqjTp097x1ydK664QqtXr9axY8dMnQ+g7jX0dQEA6qeRI0dq6tSp+vbbbyVJmzZt0uuvv67s7GzvOR6PR7Nnz9b777+vfv36SZKioqL0ySef6Pnnn9fAgQPVokULSVJERITCwsIq3SMmJkaPPfaYJKlDhw5avHixsrKydO211yorK0tffPGF9u7dK4fDIUlavny5fve73+mzzz5Tnz59lJGRoTvvvFN33nmnJOnxxx/X+++/X+2s07Zt287bbrPZztn29ddfq127dgoODq7S1rp1a9lsNn399dfn7f+MF154QSNGjFB4eLi6deum/v37a/jw4YqNjTV1PYDaR3ACUCOXX365brjhBi1btkyGYeiGG27QZZddVumc3bt368SJE7r22msrHS8tLa3ySO9sYmJiKu23atVKP/74oyQpPz9fDofDG5okqUuXLgoLC1N+fr769Omj/Pz8KrND/fr104cffnje+7Zv377a2s7HMIxfdf0ZV199tfbs2aNPP/1UmzdvVlZWlhYuXKi0tDRNnz69Vu4B4MIQnADUWHJyssaPHy9JeuaZZ6q0Hz9+XJL03nvvqU2bNpXarFZrtf03atSo0r7FYlFFRUVNyzUtNDT0vO0jR47U3//+97O2dezYUZ988olKS0urzDp9//33crvd6tixo+laGjVqpAEDBmjAgAGaPHmyHn/8cc2cOVOTJ08+66wWgLpFcAJQY9ddd51KS0tlsViUkJBQpb1Lly6yWq3at2+fBg4ceNY+zvzPv7y8/ILuHR0drf3792v//v3eWaedO3fq6NGj6tKli/ecnJwcjRo1ynvdp59+Wm3fv+ZR3e23366//e1vev7553X//fdXaps/f74aNWqkm2++udoazqVLly4qKyvTqVOnCE6ADxCcANRYUFCQ8vPzvf/+pWbNmumhhx7SpEmTVFFRof79+6u4uFibNm2SzWbT6NGj5XQ6ZbFY9O677+r6669XSEhItTM+khQXFyeXy6URI0YoIyNDZWVlGjdunAYOHKjevXtLkiZMmKAxY8aod+/eio2N1YoVK7Rjxw5FRUWdt+9f86iuX79+mjBhgh5++GGVlpbqxhtv1OnTp/Xqq69q4cKFysjIqPR4UZK++OILNWvWzLtvsVjUrVs3DRo0SElJSerdu7fCw8O1c+dOPfroo/rDH/5w3vAGoO4QnAD8KtX9D3zWrFm6/PLLlZ6erj179igsLEw9e/bUo48+Kklq06aN0tLSNGXKFI0dO1ajRo3SsmXLqr2vxWLRW2+9pfvvv19XX321GjRooOuuu06LFi3ynnPbbbfpm2++0SOPPKJTp07p5ptv1l/+8hetW7fuV425OhkZGYqJidGzzz6rv/71rwoKClLPnj31r3/9S0OHDq1y/tVXX11pPygoSGVlZUpISNDLL7+sRx99VCdOnFDr1q31xz/+UampqXVaP4Bzsxi1tYoRAAAgwPEeJwAAAJMITgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4KSfP4/gdrtr7TMJAAAgMBGcJB07dkx2u50vkAMAgPMiOAEAAJhEcAIAADCJ4AQAAGAS36oDcFEszi30dQmmje8b6esSAPgpZpwAAABMIjgBAACYRHACAAAwieAEAABgEsEJAADAJIITAACASQQnAAAAkwhOAAAAJhGcAAAATCI4AQAAmERwAgAAMMnnwWnt2rXq37+/wsLCFB4erj/+8Y/65ptvvO2bN29W9+7d1bhxY/Xu3Vv/+te/ZLFYtG3bNu85X375pYYMGaLQ0FC1bNlSd9xxh/7973+f854ej0dut7vSBgAAUB2fB6eSkhKlpKRoy5YtysrKUoMGDXTTTTepoqJCbrdbQ4cOlcvl0tatWzVr1ixNnjy50vVHjx7VNddcox49emjLli1au3atfvjhB916663nvGd6errsdrt3czgcdT1MAAAQACyGYRi+LuI//fvf/9bll1+uL774Qp988on++te/6rvvvlPjxo0lSUuXLtWf//xn5eXlqXv37nr88cf18ccfa926dd4+vvvuOzkcDhUUFKhjx45V7uHxeOTxeLz7brdbDodDxcXFstlsdT9I4BK0OLfQ1yWYNr5vpK9LAOCnGvq6gF27dik1NVU5OTn697//rYqKCknSvn37VFBQoJiYGG9okqS+fftWun779u368MMPFRoaWqXvb7755qzByWq1ymq11vJIAABAoPN5cBo6dKicTqeWLFmi1q1bq6KiQl27dlVpaamp648fP66hQ4fqySefrNLWqlWr2i4XAABcwnwanH766ScVFBRoyZIlGjBggCTpk08+8bZ36tRJr776qjwej3eG6LPPPqvUR8+ePfXm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CAAW45fpww9t3bpVvXr1UmFhoZxOZ5X24uJitWnTRh6PR0FBQXr22WeVnJx8zv48Ho88Ho933+12y+FwqLi4WDabrU7GAKD+WJxb6OsSamR830hflwAEvHqxxqlbt24aPHiwXC6XEhISFB8fr+HDh6t58+aSpGbNmmnbtm06fvy4srKylJKSoqioKA0aNOis/VmtVlmt1os4AgAAEAjqxYyT9PNjuM2bN2v9+vVatWqVDh48qJycHLVt27bKuXfddZf279+vdevWmerb7XbLbrcz4wRAEjNOAM6tXqxxkiSLxaLY2FilpaUpLy9PwcHBWrVq1VnPraioqPQoDgAAoDbUi0d1OTk5ysrKUnx8vCIiIpSTk6NDhw4pOjpa6enp6t27t9q1ayePx6PVq1frlVde0XPPPefrsgEAQICpF8HJZrNp48aNysjIkNvtltPp1IIFCzRkyBBt2rRJ48aN03fffaeQkBB17txZr776qm677TZflw0AAAJMvVnjVJdY4wTgP7HGCcC51Js1TgAAAL5GcAIAADCJ4AQAAGASwQkAAMAkghMAAIBJBCcAAACTeB2BeB0BAAAwhxknAAAAkwhOAAAAJhGcAAAATCI4AQAAmERwAgAAMIngBAAAYFJDXxcAwP8tzi30dQkX1fi+kb4uAYCfYsYJAADAJIITAACASQQnAAAAkwhOAAAAJhGcAAAATCI4AQAAmERwAgAAMIngBAAAYBLBCQAAwKSACk6vv/66LBaLbrzxRl+XAgAAAlDABKfCwkI99NBDGjBggK9LAQAAAareBKfMzEy5XC6FhIQoPDxccXFxKikpkSSVl5drxIgRSktLU1RUlI8rBQAAgapeBKeioiIlJSUpOTlZ+fn5ys7OVmJiogzDkCTNnDlTERERuvPOO0315/F45Ha7K20AAADVaejrAswoKipSWVmZEhMT5XQ6JUkul0uS9Mknn+gf//iHtm3bZrq/9PR0paWl1UWpAAAggNWLGadu3bpp8ODBcrlcuuWWW7RkyRIdOXJEx44d0x133KElS5bosssuM93f1KlTVVxc7N32799fh9UDAIBAYTHOPO/yc4ZhaPPmzVq/fr1WrVqlgwcPat26derZs6eCgoK851VUVEiSGjRooIKCArVr167avt1ut+x2u4qLi2Wz2epsDEB9tTi30NclXFTj+0b6ugQAfqpe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dOjQIUVHR0uSHn74YT322GNq166dunfvrpdeeknbtm3TihUrfvV4AJwfwQmAKdXNvsyaNUuXX3650tPTtWfPHoWFhalnz5569NFHJUlt2rRRWlqapkyZorFjx2rUqFFatmxZtfe1WCx66623dP/99+vqq69WgwYNdN1112nRokXec2677TZ98803euSRR3Tq1CndfPPN+stf/qJ169b9qjGbcfvtt1c5tn//fj311FNKTk7WVVddpcsuu0yTJ0+W2+32nhMWFqaVK1dqxowZOnXqlDp06KDXXntNv/vd75Sfn6+NGzcqIyNDbrdbTqdTCxYs0JAhQyRJDzzwgIqLi/Xggw/qxx9/VJcuXfT222+rQ4cOdT5e4FJnMYz///etAAAAOC/e4wQAAGASwQkAAMAkghMAAIBJBCcAAACTCE4AAAAmEZwAAABMIjhJMgxDbrdbvJkBAACcD8FJ0rFjx2S323Xs2DFflwIAAPwYwQkAAMAkghMAAIBJfKsOwCVvcW5hpf3xfSN9UgcA/8eMEwAAgEkEJwAAAJMITgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASwQkAAMAkghMAAIBJBCcAAACTCE4AAAAm+Tw4rV27Vv3791dYWJjCw8P1xz/+Ud988423ffPmzerevbsaN26s3r1761//+pcsFou2bdvmPefLL7/UkCFDFBoaqpYtW+qOO+7Qv//9bx+MBgAABDKfB6eSkhKlpKRoy5YtysrKUoMGDXTTTTepoqJCbrdbQ4cOlcvl0tatWzVr1ixNnjy50vVHjx7VNddcox49emjLli1au3atfvjhB916663nvKfH45Hb7a60AQAAVKehrwu4+eabK+2/+OKLuvzyy7Vz50598sknslgsWrJkiRo3bqwuXbrowIED+vOf/+w9f/HixerRo4dmz55dqQ+Hw6Gvv/5aHTt2rHLP9PR0paWl1d2gAABAQPL5jNOuXbuUlJSkqKgo2Ww2RUZGSpL27dungoICxcTEqHHjxt7z+/btW+n67du368MPP1RoaKh369y5syRVeuT3n6ZOnari4mLvtn///roZHAAACCg+n3EaOnSonE6nlixZotatW6uiokJdu3ZVaWmpqeuPHz+uoUOH6sknn6zS1qpVq7NeY7VaZbVaf1XdAADg0uPT4PTTTz+poKBAS5Ys0YABAyRJ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ywIAAAGm3n9ypbS0VNdee60iIiKUmZmpNm3a6Ntvv1VYWJivSwMAAAGm3gSnzMxMpaWlaffu3WrSpIl69Oiht956S6+88ooOHz6szZs3q1GjRpKkyMjI8/bl8Xjk8Xi8+263uy5LBwAAAaJePKorKipSUlKSkpOTlZ+fr+zsbCUmJsowDL399tvq16+f7rvvPrVs2VJdu3bV7NmzVV5efs7+0tPTZbfbvZvD4biIowEAAPVVvZhxKioqUllZmRITE+V0OiVJLpdLkrRnzx598MEHGjFihFavXq3du3dr3LhxOn36tB577LGz9jd16lSlpKR4991uN+EJAABUq14Ep27dumnw4MFyuVxKSEhQfHy8hg8frubNm6uiokIRERF64YUXFBQUpF69eunAgQOaN2/eOYOT1WqV1Wq9yKMAAAD1Xb14VBcUFKQNGzZozZo16tKlixYtWqROnTpp7969atWqlTp27KigoCDv+dHR0Tp48KBKS0t9WDUAAAg09SI4SZLFYlFsbKzS0tKUl5en4OBgrVq1SrGxsdq9e7cqKiq853799ddq1aqVgoODfVgxAAAINPXiUV1OTo6ysrIUHx+viIgI5eTk6NChQ4qOjlbXrl21ePFiTZgwQffff7927dql2bNn64EHHvB12QAAIMDUi+Bks9m0ceNGZWRkyO12y+l0asGCBRoyZIgkad26dZo0aZJiYmLUpk0bTZgwQZMnT/Zx1QAAINBYDMMwfF2Er7ndbtntdhUXF8tms/m6HAA+tji30Gf3Ht830mf3BlC9erPGCQAAwNcITgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASryMQryMAAADmMOMEAABgEsEJAADApHrxyZW6duZppdvt9nElAACgLjRr1kwWi+VX90NwknTs2DFJksPh8HElAACgLtTWOmYWh0uqqKjQ999/X2tpVPp59srhcGj//v2XxIJzxhu4LqWxSow3kF1KY5UY7y8x41SLGjRooN/85jd10rfNZrsk/oM9g/EGrktprBLjDWSX0lglxlvbWBwOAABgEsEJAADAJIJTHbFarXrsscdktVp9XcpFwXgD16U0VonxBrJLaawS460rLA4HAAAwiRknAAAAkwhOAAAAJhGcAAAATCI4AQAAmERwAgAAMIngBAAAYBLBCQAAwCSCEwAAgEkEJwAAAJMITgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4ATApwYNGqSJEyfWer8zZsxQ9+7da73fCzVmzBjdeOON5z2nrv4GAGofwQnAWY0ZM0YWi0X33ntvlbb77rtPFotFY8aMMd1fdna2LBaLjh49WntF+lBhYaEsFot3a9GihQYOHKiPP/640nkLFy7UsmXLfFMkgFpHcAJwTg6HQ6+//rpOnjzpPXbq1Cn985//1G9/+1sfVuY/3n//fRUVFWnjxo1q3bq1/vjHP+qHH37wttvtdoWFhfmuQAC1iuAE4Jx69uwph8OhlStXeo+tXLlSv/3tb9WjR49K51ZUVCg9PV1t27ZVSEiIunXrpszMTEk/z8784Q9/kCQ1b968ymxVRUWFHnnkEbVo0UJXXHGFZsyYUanvffv2adiwYQoNDZXNZtOtt95aKZxI0pw5c9SyZUs1a9ZMd955p06dOlWLf4lzCw8P1xVXXKGuXbvq0UcfldvtVk5Ojrf9l4/qSkpKNGrUKIWGhqpVq1ZasGBBlT6Liop0ww03KCQkRG3bttU///lPRUZGKiMjw3vO0aNHddddd+nyyy+XzWbTNddco+3bt9flUAGI4ASgGsnJyXrppZe8+y+++KLGjh1b5bz09HQtX75cf//737Vjxw5NmjRJI0eO1EcffSSHw6E333xTklRQUKCioiItXLjQe+3LL7+spk2bKicnR3PnztXMmTO1YcMGST+HqmHDhunw4cP66KOPtGHDBu3Zs0e33Xab9/o33nhDM2bM0OzZs7Vlyxa1atVKzz77bLVjCw0NPe92tseU53Ly5EktX75ckhQcHHzO8x5++GF99NFHeuutt7R+/XplZ2dr69atlc4ZNWqUvv/+e2VnZ+vNN9/UCy+8oB9//LHSObfccot+/PFHrVmzRp9//rl69uypwYMH6/Dhw6ZrBlADBgCcxejRo41hw4YZP/74o2G1Wo3CwkKjsLDQaNy4sXHo0CFj2LBhxujRow3DMIxTp04ZTZo0MTZv3lypjzvvvNNISkoyDMMwPvzwQ0OSceTIkUrnDBw40Ojfv3+lY3369DEmT55sGIZhrF+/3ggKCjL27dvnbd+xY4chycjNzTUMwzD69etnjBs3rlIfv//9741u3bqdd4y7du067/bDDz+c89q9e/cakoyQkBCjadOmhsViMSQZvXr1MkpLS6v8HQ3DMI4dO2YEBwcbb7zxhrf9p59+MkJCQowJEyYYhmEY+fn5hiTjs88+q1SnJOPpp582DMMwPv74Y8NmsxmnTp2qVFO7du2M559//rxjBvDrNPRlaAPg/y6//HLdcMMNWrZsmQzD0A033KDLLrus0jm7d+/WiRMndO2111Y6XlpaWuWR3tnExMRU2m/VqpV3hiU/P18Oh0MOh8Pb3qVLF4WFhSk/P199+vRRfn5+ldmhfv366cMPPzzvfdu3b19tbdX57//+b3Xu3FlffvmlHnnkES1btkyNGjU667nffPONSktL9fvf/957rEWLFurUqZN3v6CgQA0bNlTPnj0r1dm8eXPv/vbt23X8+HGFh4dX6v/kyZP65ptvfvWYAJwbwQlAtZKTkzV+/HhJ0jPPPFOl/fjx45Kk9957T23atKnUZrVaq+3/l0HDYrGooqKipuWaFhoaet72kSNH6u9///t5z3E4HOrQoYM6dOigsrIy3XTTTfryyy9Njbumjh8/rlatWik7O7tKGwvRgbpFcAJQreuuu06lpaWyWCxKSEio0t6lSxdZrVbt27dPAwcOPGsfZ9b9lJeXX9C9o6OjtX//fu3fv98767Rz504dPXpUXbp08Z6Tk5OjUaNGea/79NNPq+1727Zt52232WwXVOvw4cOVmpqqZ599VpMmTarS3q5dOzVq1Eg5OTneXyUeOXJEX3/9tffv1qlTJ5WVlSkvL0+9evWS9POM3pEjR7z99OzZUwcPHlTDhg0VGRl5QTUC+HUITgCqFRQUpPz8fO+/f6lZs2Z66KGHNGnSJFVUVKh///4qLi7Wpk2bZLPZNHr0aDmdTlksFr377ru6/vrrFRISUu2MjyTFxcXJ5XJpxIgRysjIUFlZmcaNG6eBAweqd+/ekqQJEyZozJgx6t27t2JjY7VixQrt2LFDUVFR5+27Nh7V/SeLxaIHHnhAM2bM0D333KMmTZpUag8NDdWdd96phx9+WOHh4YqIiNC0adPUoMH/+51O586dFRcXp7vvvlvPPfecGjVqpAcffFAhISGyWCzev0m/fv104403au7cuerYsaO+//57vffee7rpppu8fxcAtY9f1QEwxWaznXcGZtasWZo+fbrS09MVHR2t6667Tu+9957atm0rSWrTpo3S0tI0ZcoUtWzZ0vvorzoWi0VvvfWWmjdvrquvvlpxcXGKiorSf//3f3vPue222zR9+nQ98sgj6tWrl7799lv95S9/+XUDrqHRo0fr9OnTWrx48Vnb582bpwEDBmjo0KGKi4tT//79vTNLZyxfvlwtW7bU1VdfrZtuukl//vOf1axZMzVu3FjSz3+T1atX6+qrr9bYsWPVsWNH3X777fr222/VsmXLOh8jcCmzGIZh+LoIAMC5fffdd3I4HHr//fc1ePBgX5cDXNIITgDgZz744AMdP35cLpdLRUVFeuSRR3TgwAF9/fXX5/zFHoCLgzVOAOBnTp8+rUcffVR79uxRs2bNdNVVV2nFihWEJsAPMOMEAABgEovDAQAATCI4AQAAmERwAgAAMIngJMkwDLndbrHcCwAAnA/BSdKxY8dkt9t17NgxX5cCAAD8GMEJAADAJIITAACASbwAE8BFtTi30NclVGt830hflwDATzHjBAAAYBLBCQAAwCSCEwAAgEkEJwAAAJMITgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASwQkAAMAkghMAAIBJPg9Oa9euVf/+/RUWFqbw8HD98Y9/1DfffONt37x5s7p3767GjRurd+/e+te//iWLxaJt27Z5z/nyyy81ZMgQhYaGqmXLlrrjjjv073//2wejAQAAgcznwamkpEQpKSnasmWLsrKy1KBBA910002qqKiQ2+3W0KFD5XK5tHXrVs2aNUuTJ0+udP3Ro0d1zTXXqEePHtqyZYvWrl2rH374Qbfeeus57+nxeOR2uyttAAAA1Wno6wJuvvnmSvsvvviiLr/8cu3cuVOffPKJLBaLlixZosaNG6tLly46cOCA/vznP3vPX7x4sXr06KHZs2dX6sPhcOjrr79Wx44dq9wzPT1daWlpdTcoAAAQkHw+47Rr1y4lJSUpKipKNptNkZGRkqR9+/apoKBAMTExaty4sff8vn37Vrp++/bt+vDDDxUaGurdOnfuLEmVHvn9p6lTp6q4uNi77d+/v24GBwAAAorPZ5yGDh0qp9OpJUuWqHXr1qqoqFDXrl1VWlpq6vrjx49r6NChevLJJ6u0tWrV6qzXWK1WWa3WX1U3AAC49Pg0OP30008qKCjQkiVLNGDAAEnSJ5984m3v1KmTXn31VXk8Hm/Q+eyzzyr10bNnT7355puKjIxUw4Y+z4EAACCA+fRRXfPmzRUeHq4XXnhBu3fv1gcffKCUlBRv+5/+9CdVVFTo7rvvVn5+vtatW6f58+dLkiwWiyTpvvvu0+HDh5WUlKTPPvtM33zzjdatW6exY8eqvLzcJ+MCAACByafBqUGDBnr99df1+eefq2vXrpo0aZLmzZvnbbfZbHrnnXe0bds2de/eXdOmTVNqaqokedc9tW7dWps2bVJ5ebni4+Plcrk0ceJEhYWFqUEDny/hAgAAAcRiGIbh6yIuxIoVKzR27FgVFxcrJCSkVvp0u92y2+0qLi6WzWarlT4BnN3i3EJfl1Ct8X0jfV0CAD/l94uCli9frqioKLVp00bbt2/X5MmTdeutt9ZaaAIAADDL74PTwYMHlZqaqoMHD6pVq1a65ZZb9MQTT/i6LAAAcAmqd4/q6gKP6oCLh0d1AOozVk8DAACYRHACAAAwieAEAABgEsEJAADAJBaHi8XhAADAHGacAAAATCI4AQAAmERwAgAAMIngBAAAYBLBCQAAwCS//1YdANSls30Chk+uADgXZpwAAABMIjgBAACYRHACAAAwieAEAABgEsEJAADAJIITAACASQQnAAAAkwhOAAAAJhGcAAAATCI4AQAAmERwAgAAMIngBAAAYJLfBKfMzEy5XC6FhIQoPDxccXFxKikpkSQtXbpU0dHRaty4sTp37qxnn33We11ycrJiYmLk8XgkSaWlperRo4dGjRp1znt5PB653e5KGwAAQHX8IjgVFRUpKSlJycnJys/PV3Z2thITE2UYhlasWKHU1FQ98cQTys/P1+zZszV9+nS9/PLLkqS//e1vKikp0ZQpUyRJ06ZN09GjR7V48eJz3i89PV12u927ORyOizJOAABQv1kMwzB8XcTWrVvVq1cvFRYWyul0Vmpr3769Zs2apaSkJO+xxx9/XKtXr9bmzZslSf/7v/+rgQMHasqUKUpPT9eHH36o/v37n/N+Ho/HO0MlSW63Ww6HQ8XFxbLZbLU8OgD+bHFuYZVj4/tGXvQ6ANQPfhGcysvLlZCQoNzcXCUkJCg+Pl7Dhw9XcHCwQkNDFRISogYN/t/kWFlZmex2u3744QfvsUcffVTp6emaPHmy5syZc0H3d7vdstvtBCfgEkRwAnAhGvq6AEkKCgrShg0btHnzZq1fv16LFi3StGnT9M4770iSlixZot///vdVrjmjoqJCmzZtUlBQkHbv3n1RawcAAJcOv1jjJEkWi0WxsbFKS0tTXl6egoODtWnTJrVu3Vp79uxR+/btK21t27b1Xjtv3jx99dVX+uijj7R27Vq99NJLPhwJAAAIVH4x45STk6OsrCzFx8crIiJCOTk5OnTokKKjo5WWlqYHHnhAdrtd1113nTwej7Zs2aIjR44oJSVFeXl5Sk1NVWZmpmJjY/XUU09pwoQJGjhwoKKionw9NAAAEED8IjjZbDZt3LhRGRkZcrvdcjqdWrBggYYMGSJJatKkiebNm6eHH35YTZs2lcvl0sSJE3Xq1CmNHDlSY8aM0dChQyVJd999t9577z3dcccd2rhxY6VHegAAAL+GXywO9zUWhwOXLhaHA7gQfrPGCQAAwN8RnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASwQkAAMAkXkcgXkcAAADMYcYJAADAJIITAACASQQnAAAAkwhOAAAAJhGcAAAATCI4AQAAmNTQ1wUAgL9ZnFvo6xL8xvi+kb4uAfArzDgBAACYRHACAAAwieAEAABgEsEJAADAJIITAACASQQnAAAAkwhOAAAAJhGcAAAATPJpcBo0aJAmTpxYq30uW7ZMYWFhtdonAACAFIAzTrfddpu+/vprX5cBAAACUMB9ciUkJEQhISG+LgMAAAQgn884lZWVafz48bLb7brssss0ffp0GYYhSYqMjNTjjz+uUaNGKTQ0VE6nU2+//bYOHTqkYcOGKTQ0VDExMdqyZYu3PzOP6jwej9xud6UNAACgOj4PTi+//LIaNmyo3NxcLVy4UE899ZSWLl3qbX/66acVGxurvLw83XDDDbrjjjs0atQojRw5Ulu3blW7du00atQob9gyIz09XXa73bs5HI66GBoAAAgwPg9ODodDTz/9tDp16qQRI0bo/vvv19NPP+1tv/7663XPPfeoQ4cOSk1NldvtVp8+fXTLLbeoY8eOmjx5svLz8/XDDz+YvufUqVNVXFzs3fbv318XQwMAAAHG58HpyiuvlMVi8e7369dPu3btUnl5uSQpJibG29ayZUtJksvlqnLsxx9/NH1Pq9Uqm81WaQMAAKiOz4NTdRo1auT995mAdbZjFRUVF7cwAABwyfF5cMrJyam0/+mnn6pDhw4KCgryUUUAAABn5/PgtG/fPqWkpKigoECvvfaaFi1apAkTJvi6LAAAgCp8/h6nUaNG6eTJk+rbt6+CgoI0YcIE3X333b4uCwAAoAqLcSG/4w9QbrdbdrtdxcXFLBQHoMW5hb4uwW+M7xvp6xIAv+LzR3UAAAD1BcEJAADAJIITAACASQQnAAAAkwhOAAAAJhGcAAAATOJ1BOJ1BAAAwBxmnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASwQkAAMAkghMAAIBJDX1dAAD4m8W5hb4u4aIa3zfS1yUA9QYzTgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASwQkAAMAkghMAAIBJBCcAAACT/Do4DRo0SBMnTvR1GQAAAJL8PDgBAAD4E4ITAACASX4fnMrKyjR+/HjZ7XZddtllmj59ugzDkCRFRkZq1qxZSkpKUtOmTdWmTRs988wzPq4YAAAEKr8PTi+//LIaNmyo3NxcLVy4UE899ZSWLl3qbZ83b566deumvLw8TZkyRRMmTNCGDRvO26fH45Hb7a60AQAAVMdinJm+8UODBg3Sjz/+qB07dshisUiSpkyZorfffls7d+5UZGSkoqOjtWbNGu81t99+u9xut1avXn3OfmfMmKG0tLQqx4uLi2Wz2Wp/IADqlcW5hb4u4aIa3zfS1yUA9YbfzzhdeeWV3tAkSf369dOuXbtUXl7u3f9P/fr1U35+/nn7nDp1qoqLi73b/v37a79wAAAQcBr6ugBfsFqtslqtvi4DAADUM34/45STk1Np/9NPP1WHDh0UFBTk3f9le3R09EWrDwAAXDr8fsZp3759SklJ0T333KOtW7dq0aJFWrBggbd906ZNmjt3rm688UZt2LBB//M//6P33nvPhxUDAIBA5ffBadSoUTp58qT69u2roKAgTZgwQXfffbe3/cEHH9SWLVuUlpYmm82mp556SgkJCT6sGAAABCq/Dk7Z2dnefz/33HNnPcdms+mNN964SBUBAIBLmd+vcQIAAPAXBCcAAACT/PpRXXUKCwt9XQIAALiEMOMEAABgEsEJAADAJIITAACASX79kd+Lxe12y26385FfAABwXsw4AQAAmERwAgAAMIngBAAAYBLBCQAAwCSCEwAAgEkEJwAAAJPq9SdXAPjG4txCX5dQp8b3jfR1CQD8FDNOAAAAJhGcAAAATCI4AQAAmERwAgAAMIngBAAAYBLBCQAAwCSCEwAAgEkEJwAAAJMITgAAACbVODi98sorio2NVevWrfXtt99KkjIyMvTWW2/VWnEAAAD+pEbB6bnnnlNKSoquv/56HT16VOXl5ZKksLAwZWRk1GZ91dqxY4duvvlmRUZGymKxXPT7AwCAS0eNgtOiRYu0ZMkSTZs2TUFBQd7jvXv31hdffFFrxZlx4sQJRUVFac6cObriiisu6r0BAMClpUbBae/everRo0eV41arVSUlJb+6qLPJzMyUy+VSSEiIwsPDFRcXp5KSEvXp00fz5s3T7bffLqvVaqovj8cjt9tdaQMAAKhOjYJT27ZttW3btirH165dq+jo6F9bUxVFRUVKSkpScnKy8vPzlZ2drcTERBmGUaP+0tPTZbfbvZvD4ajligEAQCBqWJOLUlJSdN999+nUqVMyDEO5ubl67bXXlJ6erqVLl9Z2jSoqKlJZWZkSExPldDolSS6Xq8b9TZ06VSkpKd59t9tNeAIAANWqUXC66667FBISor/+9a86ceKE/vSnP6l169ZauHChbr/99tquUd26ddPgwYPlcrmUkJCg+Ph4DR8+XM2bN69Rf1ar1fRjPQAAgDMu+FFdWVmZli9frri4OO3atUvHjx/XwYMH9d133+nOO++sixoVFBSkDRs2aM2aNerSpYsWLVqkTp06ae/evXVyPwAAgLO54ODUsGFD3XvvvTp16pQkqUmTJoqIiKj1wn7JYrEoNjZWaWlpysvLU3BwsFatWlXn9wUAADijRo/q+vbtq7y8PO96o7qWk5OjrKwsxcfHKyIiQjk5OTp06JCio6NVWlqqnTt3SpJKS0t14MABbdu2TaGhoWrfvv1FqQ8AAFwaahScxo0bpwcffFDfffedevXqpaZNm1Zqj4mJqZXizrDZbNq4caMyMjLkdrvldDq1YMECDRkyRIWFhZVejTB//nzNnz9fAwcOVHZ2dq3WAQAALm0Wowa/6W/QoOoTPovFIsMwZLFYvG8Sry/cbrfsdruKi4tls9l8XQ7g9xbnFvq6hDo1vm+kr0sA4KdqNOPEomwAAHApqlFwulhrmwAAAPxJjYLT8uXLz9s+atSoGhUDAADgz2oUnCZMmFBp//Tp0zpx4oSCg4PVpEkTghMAAAhINfpW3ZEjRyptx48fV0FBgfr376/XXnuttmsEAADwCzUKTmfToUMHzZkzp8psFAAAQKCo0aO6c3bWsKG+//772uwSgB/i5/oALlU1Ck5vv/12pX3DMFRUVKTFixcrNja2VgoDAADwNzUKTjfeeGOlfYvFossvv1zXXHONFixYUBt1AQAA+J0aBaeKiorargMAAMDv1Whx+MyZM3XixIkqx0+ePKmZM2f+6qIAAAD8UY2+VRcUFKSioiJFRERUOv7TTz8pIiKCb9UBAICAVKMZpzMf8/2l7du3q0WLFr+6KAAAAH90QWucmjdvLovFIovFoo4dO1YKT+Xl5Tp+/LjuvffeWi8SAC6mxbmFvi7Br/E6ClzKLig4ZWRkyDAMJScnKy0tTXa73dsWHBysyMhI9evXr9aLBAAA8AcXFJxGjx4tSWrbtq2uuuoqNWrUqE6KAgAA8Ec1eh3BwIEDvf8+deqUSktLK7WzwBoAAASiGi0OP3HihMaPH6+IiAg1bdpUzZs3r7QBAAAEohoFp4cfflgffPCBnnvuOVmtVi1dulRpaWlq3bq1li9fXts1AgAA+IUaPap75513tHz5cg0aNEhjx47VgAED1L59ezmdTq1YsUIjRoyo7ToBAAB8rkYzTocPH1ZUVJSkn9czHT58WJLUv39/bdy4sfaqAwAA8CM1Ck5RUVHau3evJKlz58564403JP08ExUWFlZrxQEAAPiTGgWnsWPHavv27ZKkKVOm6JlnnlHjxo01adIkPfzww7VaIAAAgL+o0bfqfunbb7/V559/rvbt2ysmJqY26jJtyZIlWr58ub788ktJUq9evTR79mz17dvXdB98qw7Af+LN4efHm8NxKavR4vD/dOrUKTmdTjmdztqo54JlZ2crKSlJV111lRo3bqwnn3xS8fHx2rFjh9q0aeOTmgAAQGCq0aO68vJyzZo1S23atFFoaKj27NkjSZo+fbr+8Y9/1GqBZ2RmZsrlcikkJETh4eGKi4tTSUmJVqxYoXHjxql79+7q3Lmzli5dqoqKCmVlZZ2zL4/HI7fbXWkDAACoTo2C0xNPPKFly5Zp7ty5Cg4O9h7v2rWrli5dWmvFnVFUVKSkpCQlJycrPz9f2dnZSkxM1NmeMp44cUKnT59WixYtztlfenq67Ha7d3M4HLVeMwAACDw1WuPUvn17Pf/88xo8eLCaNWum7du3KyoqSl999ZX69eunI0eO1GqRW7duVa9evVRYWFjtI8Fx48Zp3bp12rFjhxo3bnzWczwejzwej3ff7XbL4XCwxgmAJNY4VYc1TriU1WiN04EDB9S+ffsqxysqKnT69OlfXdQvdevWTYMHD5bL5VJCQoLi4+M1fPjwKp93mTNnjl5//XVlZ2efMzRJktVqldVqrfU6AQBAYKvRo7ouXbro448/rnI8MzNTPXr0+NVF/VJQUJA2bNigNWvWqEuXLlq0aJE6derkfZeUJM2fP19z5szR+vXrL/ov+wAAwKWhRjNOqampGj16tA4cOKCKigqtXLlSBQUFWr58ud59993arlGSZLFYFBsbq9jYWKWmpsrpdGrVqlVKSUnR3Llz9cQTT2jdunXq3bt3ndwfAADggmac9uzZI8MwNGzYML3zzjt6//331bRpU6Wmpio/P1/vvPOOrr322lovMicnR7Nnz9aWLVu0b98+rVy5UocOHVJ0dLSefPJJTZ8+XS+++KIiIyN18OBBHTx4UMePH6/1OgAAwKXtgmacOnTooKKiIkVERGjAgAFq0aKFvvjiC7Vs2bKu6pP08/fwNm7cqIyMDLndbjmdTi1YsEBDhgzRX/7yF5WWlmr48OGVrnnsscc0Y8aMOq0LAABcWi4oOP3yB3hr1qxRSUlJrRZ0NtHR0Vq7du1Z2woLC+v8/gAAAFINF4efUQtfawEAAKg3Lig4WSwWWSyWKscAAAAuBRf8qG7MmDHedyCdOnVK9957r5o2bVrpvJUrV9ZehQAAAH7igoLT6NGjK+2PHDmyVosBAADwZxcUnF566aW6qgMAAMDv/arF4QAAAJeSGn3kN9C43W7Z7XY+8gsAAM6LGScAAACTCE4AAAAmEZwAAABMIjgBAACYRHACAAAwieAEAABg0gW9ABMALqbFuYU+ue/4vpE+uS8A/8eMEwAAgEkEJwAAAJMITgAAACYRnAAAAEwiOAEAAJhEcAIAADCJ4AQAAGASwQkAAMAkghMAAIBJ9T44rVy5Ur1791ZYWJiaNm2q7t2765VXXvF1WQAAIADV+0+utGjRQtOmTVPnzp0VHBysd999V2PHjlVERIQSEhJ8XR4AAAgg9WbGKTMzUy6XSyEhIQoPD1dcXJxKSko0aNAg3XTTTYqOjla7du00YcIExcTE6JNPPvF1yQAAIMDUi+BUVFSkpKQkJScnKz8/X9nZ2UpMTJRhGJXOMwxDWVlZKigo0NVXX33O/jwej9xud6UNAACgOvXiUV1RUZHKysqUmJgop9MpSXK5XN724uJitWnTRh6PR0FBQXr22Wd17bXXnrO/9PR0paWl1XndAAAgsFiMX07b+KHy8nIlJCQoNzdXCQkJio+P1/Dhw9W8eXNJUkVFhfbs2aPjx48rKytLs2bN0r/+9S8NGjTorP15PB55PB7vvtvtlsPhUHFxsWw228UYEgATFucW+uS+4/tG+uS+APxfvQhO0s+P4TZv3qz169dr1apVOnjwoHJyctS2bdsq5951113av3+/1q1bZ6pvt9stu91OcAL8DMEJgL+pF2ucJMlisSg2NlZpaWnKy8tTcHCwVq1addZzKyoqKs0oAQAA1IZ6scYpJydHWVlZio+PV0REhHJycnTo0CFFR0crPT1dvXv3Vrt27eTxeLR69Wq98soreu6553xdNgAACDD1IjjZbDZt3LhRGRkZcrvdcjqdWrBggYYMGaJNmzZp3Lhx+u677xQSEqLOnTvr1Vdf1W233ebrsgEAQICpN2uc6hJrnAD/xBonAP6m3qxxAgAA8DWCEwAAgEkEJwAAAJMITgAAACYRnAAAAEwiOAEAAJjE6wjE6wgAAIA5zDgBAACYRHACAAAwieAEAABgEsEJAADAJIITAACASQQnAAAAkxr6ugAA9cPi3EJfl3DRjO8b6esSAPgpZpwAAABMIjgBAACYRHACAAAwieAEAABgEsEJAADAJIITAACASQQnAAAAkwhOAAAAJhGcAAAATAqo4PT666/LYrHoxhtv9HUpAAAgAAVMcCosLNRDDz2kAQMG+LoUAAAQoOpNcMrMzJTL5VJISIjCw8MVFxenkpISSVJ5eblGjBihtLQ0RUVF+bhSAAAQqOpFcCoqKlJSUpKSk5OVn5+v7OxsJSYmyjAMSdLMmTMVERGhO++801R/Ho9Hbre70gYAAFCdhr4uwIyioiKVlZUpMTFRTqdTkuRyuSRJn3zyif7xj39o27ZtpvtLT09XWlpaXZQKAAACWL2YcerWrZsGDx4sl8ulW265RUuWLNGRI0d07Ngx3XHHHVqyZIkuu+wy0/1NnTpVxcXF3m3//v11WD0AAAgUFuPM8y4/ZxiGNm/erPXr12vVqlU6ePCg1q1bp549eyooKMh7XkVFhST9f+3dfVBU1/0/8PeKsDzoAhZ5UAmKIoKAohEUmpBWBIlN7NC0SpyI1WDTGLWJGrUaEK2RRHyISlPHKDSdpDTxeVpQExpqogSMoiGAyCIa04JRiayIouDn90d+7NcVhLs87YLv18zOsOeePfv57OHufubu2XvRq1cvlJSUYOjQoa2OrdPpYG9vj+rqamg0mk7Lgag725Z3wdQhdJlXggabOgQiMlPd4qs6AFCpVAgNDUVoaCji4+Ph4eGBzMxMFBQUGPRbuXIlbty4gXfeeQfu7u4mipaIiIh6om5ROOXm5iIrKwsRERFwdnZGbm4urly5gsDAQPj5+Rn0dXBwAIAm7URERETt1S0KJ41Gg6NHj2Lz5s3Q6XTw8PDAhg0bEBUVZerQiIiI6BHSbdY4dSaucSJqHdc4ERF1k1/VEREREZkDFk5ERERECrFwIiIiIlKIhRMRERGRQiyciIiIiBRi4URERESkEAsnIiIiIoV4HifwPE5ERESkDI84ERERESnEwomIiIhIIRZORERERAqxcCIiIiJSiIUTERERkUIsnIiIiIgU6m3qAIiIzM22vAumDqHHeyVosKlDIGoTHnEiIiIiUoiFExEREZFCLJyIiIiIFGLhRERERKQQCyciIiIihVg4ERERESnEwomIiIhIIRZORERERAqxcCIiIiJSqNsXTmlpaVCpVAY3a2trU4dFREREPVCPuOSKRqNBSUmJ/r5KpTJhNERERNRTdZsjTrt374a/vz9sbGzwk5/8BOHh4bh58yaAHwslV1dX/c3FxaXFserq6qDT6QxuRERERK3pFoVTRUUFYmJiMHv2bBQXFyM7OxvR0dEQEQBATU0NPDw84O7ujqlTp6KwsLDF8datWwd7e3v9zd3dvSvSICIiom5OJY3Vhxk7deoUxo4diwsXLsDDw8NgW05ODkpLSxEQEIDq6mokJyfj6NGjKCwsxKBBg5odr66uDnV1dfr7Op0O7u7uqK6uhkaj6dRciMj8bcu7YOoQerxXggabOgSiNukWhVNDQwMiIyORl5eHyMhIRERE4LnnnoOjo2OTvnfv3oWPjw9iYmKwZs0aRePrdDrY29uzcCIiACycugILJ+quusVXdRYWFvjkk0+QmZkJX19fbN26Fd7e3igvL2/S19LSEoGBgdBqtSaIlIiIiHqyblE4AT8uAA8NDUViYiLy8/NhZWWFffv2NenX0NCAgoICuLm5mSBKIiIi6sm6xekIcnNzkZWVhYiICDg7OyM3NxdXrlyBj48PVq9ejfHjx2PYsGG4fv061q9fj4sXL+LFF180ddhERETUw3SLwkmj0eDo0aPYvHkzdDodPDw8sGHDBkRFReHIkSOIi4tDZWUlHB0dMXbsWBw/fhy+vr6mDpuIiIh6mG6xOLyzcXE4Ed2Pi8M7HxeHU3fVbdY4EREREZkaCyciIiIihVg4ERERESnEwomIiIhIIRZORERERAqxcCIiIiJSiKcjAE9HQERERMrwiBMRERGRQiyciIiIiBRi4URERESkEAsnIiIiIoVYOBEREREpxMKJiIiISKHepg6AiMjcbMu7YOoQWvRK0GBTh0D0yOIRJyIiIiKFWDgRERERKcTCiYiIiEghFk5ERERECrFwIiIiIlKIhRMRERGRQiyciIiIiBRi4URERESkEAsnIiIiIoV6ROF0/fp1zJs3D25ublCr1Rg+fDgyMjJMHRYRERH1MN3+kit37tzBpEmT4OzsjN27d2PgwIG4ePEiHBwcTB0aERER9TDdpnDavXs3EhMTodVqYWtri8DAQBw4cAB/+9vfUFVVhePHj8PS0hIAMHjwYNMGS0RERD1St/iqrqKiAjExMZg9ezaKi4uRnZ2N6OhoiAgOHjyICRMmYN68eXBxcYGfnx/efPNNNDQ0PHS8uro66HQ6gxsRERFRa7rFEaeKigrU19cjOjoaHh4eAAB/f38AwPnz5/Hvf/8bM2bMQEZGBrRaLV5++WXcvXsXCQkJzY63bt06JCYmdln8RERE1DOoRERMHURrGhoaEBkZiby8PERGRiIiIgLPPfccHB0dMXz4cNy+fRvl5eWwsLAAAGzcuBHr169HRUVFs+PV1dWhrq5Of1+n08Hd3R3V1dXQaDRdkhMRma9teRdMHUKLXgkabOoQiB5Z3eKrOgsLC3zyySfIzMyEr68vtm7dCm9vb5SXl8PNzQ3Dhw/XF00A4OPjg8rKSty5c6fZ8dRqNTQajcGNiIiIqDXdonACAJVKhdDQUCQmJiI/Px9WVlbYt28fQkNDodVqce/ePX3fc+fOwc3NDVZWViaMmIiIiHqabrHGKTc3F1lZWYiIiICzszNyc3Nx5coV+Pj4wM/PD9u2bcPChQsxf/58lJaW4s0338SCBQtMHTYRERH1MN2icNJoNDh69Cg2b94MnU4HDw8PbNiwAVFRUQCAw4cP49VXX0VAQAAGDhyIhQsXYunSpSaOmoiIiHqabrE4vLPpdDrY29tzcTgRAeDicCJ6uG6zxomIiIjI1Fg4ERERESnEwomIiIhIIRZORERERAqxcCIiIiJSiIUTERERkUI8HQF4OgIiIiJShkeciIiIiBRi4URERESkULe45Epna/y2UqfTmTgSIiIi6gx9+/aFSqVq9zgsnADcuHEDAODu7m7iSIiIiKgzdNQ6Zi4OB3Dv3j3873//67BqFPjx6JW7uzsuXbr0SCw4Z74916OUK8B8e7JHKVeA+T6IR5w6UK9evTBo0KBOGVuj0TwS/7CNmG/P9SjlCjDfnuxRyhVgvh2Ni8OJiIiIFGLhRERERKQQC6dOolarkZCQALVabepQugTz7bkepVwB5tuTPUq5Asy3s3BxOBEREZFCPOJEREREpBALJyIiIiKFWDgRERERKcTCiYiIiEghFk7tsHbtWoSEhMDW1hYODg6KHiMiiI+Ph5ubG2xsbBAeHo7S0lKDPlVVVZgxYwY0Gg0cHBwwZ84c1NTUdEIGyhkb04ULF6BSqZq9ffzxx/p+zW1PT0/vipRa1JY5eOqpp5rk8tJLLxn0+fbbbzFlyhTY2trC2dkZS5YsQX19fWemooix+VZVVWH+/Pnw9vaGjY0NHnvsMSxYsADV1dUG/cxlflNSUjB48GBYW1sjODgYeXl5Lfb/+OOPMWLECFhbW8Pf3x8ZGRkG25Xsx6ZiTK47duzAE088AUdHRzg6OiI8PLxJ/1mzZjWZw8mTJ3d2GooZk29aWlqTXKytrQ36mPPcAsbl29x7kkqlwpQpU/R9zHV+jx49imeeeQYDBgyASqXC/v37W31MdnY2xowZA7VajWHDhiEtLa1JH2PfC5ol1Gbx8fGyceNGee2118Te3l7RY5KSksTe3l72798vZ86ckWeffVaGDBkit27d0veZPHmyjBo1Sr788kv5/PPPZdiwYRITE9NJWShjbEz19fVSUVFhcEtMTJQ+ffrIjRs39P0ASGpqqkG/+18LU2nLHISFhUlcXJxBLtXV1frt9fX14ufnJ+Hh4ZKfny8ZGRni5OQky5cv7+x0WmVsvgUFBRIdHS0HDx4UrVYrWVlZ4uXlJb/61a8M+pnD/Kanp4uVlZXs2rVLCgsLJS4uThwcHOTy5cvN9j927JhYWFjI22+/LUVFRbJy5UqxtLSUgoICfR8l+7EpGJvr888/LykpKZKfny/FxcUya9Yssbe3l++++07fJzY2ViZPnmwwh1VVVV2VUouMzTc1NVU0Go1BLpWVlQZ9zHVuRYzP99q1awa5fvPNN2JhYSGpqan6PuY6vxkZGbJixQrZu3evAJB9+/a12P/8+fNia2srr732mhQVFcnWrVvFwsJCDh06pO9j7Ov3MCycOkBqaqqiwunevXvi6uoq69ev17ddv35d1Gq1/P3vfxcRkaKiIgEgJ06c0PfJzMwUlUol//3vfzs8diU6KqbRo0fL7NmzDdqU7BBdra35hoWFycKFCx+6PSMjQ3r16mXwRv3uu++KRqORurq6Dom9LTpqfj/66COxsrKSu3fv6tvMYX6DgoJk3rx5+vsNDQ0yYMAAWbduXbP9f/Ob38iUKVMM2oKDg+V3v/udiCjbj03F2FwfVF9fL3379pW//vWv+rbY2FiZOnVqR4faIYzNt7X3anOeW5H2z++mTZukb9++UlNTo28z5/ltpOR95PXXX5eRI0catE2bNk0iIyP199v7+jXiV3VdqLy8HJWVlQgPD9e32dvbIzg4GDk5OQCAnJwcODg44PHHH9f3CQ8PR69evZCbm9vlMXdUTCdPnsTp06cxZ86cJtvmzZsHJycnBAUFYdeuXRATn1qsPfl+8MEHcHJygp+fH5YvX47a2lqDcf39/eHi4qJvi4yMhE6nQ2FhYccnolBH/c81Xnm8d2/DS2Cacn7v3LmDkydPGuxzvXr1Qnh4uH6fe1BOTo5Bf+DHeWrsr2Q/NoW25Pqg2tpa3L17F/369TNoz87OhrOzM7y9vfH73/8e165d69DY26Kt+dbU1MDDwwPu7u6YOnWqwb5nrnMLdMz87ty5E9OnT4ednZ1BuznOr7Fa22874vVrxIv8dqHKykoAMPjgbLzfuK2yshLOzs4G23v37o1+/frp+3S1johp586d8PHxQUhIiEH76tWr8fOf/xy2trY4cuQIXn75ZdTU1GDBggUdFr+x2prv888/Dw8PDwwYMABff/01li5dipKSEuzdu1c/bnNz37jNVDpifq9evYo1a9Zg7ty5Bu2mnt+rV6+ioaGh2df97NmzzT7mYfN0/z7a2PawPqbQllwftHTpUgwYMMDgw2Xy5MmIjo7GkCFDUFZWhj/+8Y+IiopCTk4OLCwsOjQHY7QlX29vb+zatQsBAQGorq5GcnIyQkJCUFhYiEGDBpnt3ALtn9+8vDx888032Llzp0G7uc6vsR623+p0Oty6dQs//PBDu/ePRiycHrBs2TK89dZbLfYpLi7GiBEjuiiizqM01/a6desWPvzwQ7zxxhtNtt3fFhgYiJs3b2L9+vWd8sHa2fneXzT4+/vDzc0NEydORFlZGYYOHdrmcduqq+ZXp9NhypQp8PX1xapVqwy2deX8UvskJSUhPT0d2dnZBgump0+frv/b398fAQEBGDp0KLKzszFx4kRThNpmEyZMwIQJE/T3Q0JC4OPjg+3bt2PNmjUmjKzz7dy5E/7+/ggKCjJo70nz21VYOD1g0aJFmDVrVot9PD092zS2q6srAODy5ctwc3PTt1++fBmjR4/W9/n+++8NHldfX4+qqir94zuK0lzbG9Pu3btRW1uLmTNntto3ODgYa9asQV1dXYdfb6ir8m0UHBwMANBqtRg6dChcXV2b/ILj8uXLANDhcwt0Tb43btzA5MmT0bdvX+zbtw+WlpYt9u/M+W2Ok5MTLCws9K9zo8uXLz80N1dX1xb7K9mPTaEtuTZKTk5GUlISPv30UwQEBLTY19PTE05OTtBqtSb9YG1Pvo0sLS0RGBgIrVYLwHznFmhfvjdv3kR6ejpWr17d6vOYy/wa62H7rUajgY2NDSwsLNr9/6Jn1Iooapaxi8OTk5P1bdXV1c0uDv/qq6/0fQ4fPmwWi8PbGlNYWFiTX1s9zJ/+9CdxdHRsc6wdoaPm4IsvvhAAcubMGRH5v8Xh9/+CY/v27aLRaOT27dsdl4CR2ppvdXW1jB8/XsLCwuTmzZuKnssU8xsUFCSvvPKK/n5DQ4MMHDiwxcXhv/jFLwzaJkyY0GRxeEv7sakYm6uIyFtvvSUajUZycnIUPcelS5dEpVLJgQMH2h1ve7Ul3/vV19eLt7e3vPrqqyJi3nMr0vZ8U1NTRa1Wy9WrV1t9DnOa30ZQuDjcz8/PoC0mJqbJ4vD2/L/o4zGqNxm4ePGi5Ofn639mn5+fL/n5+QY/t/f29pa9e/fq7yclJYmDg4McOHBAvv76a5k6dWqzpyMIDAyU3Nxc+eKLL8TLy8ssTkfQUkzfffedeHt7S25ursHjSktLRaVSSWZmZpMxDx48KDt27JCCggIpLS2VP//5z2Jrayvx8fGdnk9rjM1Xq9XK6tWr5auvvpLy8nI5cOCAeHp6ypNPPql/TOPpCCIiIuT06dNy6NAh6d+/v9mcjsCYfKurqyU4OFj8/f1Fq9Ua/JS5vr5eRMxnftPT00WtVktaWpoUFRXJ3LlzxcHBQf/rxhdeeEGWLVum73/s2DHp3bu3JCcnS3FxsSQkJDR7OoLW9mNTMDbXpKQksbKykt27dxvMYeN72I0bN2Tx4sWSk5Mj5eXl8umnn8qYMWPEy8vLpMV+I2PzTUxMlMOHD0tZWZmcPHlSpk+fLtbW1lJYWKjvY65zK2J8vo1++tOfyrRp05q0m/P83rhxQ/+ZCkA2btwo+fn5cvHiRRERWbZsmbzwwgv6/o2nI1iyZIkUFxdLSkpKs6cjaOn1U4qFUzvExsYKgCa3zz77TN8H//88No3u3bsnb7zxhri4uIharZaJEydKSUmJwbjXrl2TmJgY6dOnj2g0Gvntb39rUIyZQmsxlZeXN8ldRGT58uXi7u4uDQ0NTcbMzMyU0aNHS58+fcTOzk5GjRolf/nLX5rt29WMzffbb7+VJ598Uvr16ydqtVqGDRsmS5YsMTiPk4jIhQsXJCoqSmxsbMTJyUkWLVpk8PN9UzE2388++6zZ/30AUl5eLiLmNb9bt26Vxx57TKysrCQoKEi+/PJL/bawsDCJjY016P/RRx/J8OHDxcrKSkaOHCn/+te/DLYr2Y9NxZhcPTw8mp3DhIQEERGpra2ViIgI6d+/v1haWoqHh4fExcUZ/UHTmYzJ9w9/+IO+r4uLizz99NNy6tQpg/HMeW5FjP9fPnv2rACQI0eONBnLnOf3Ye8xjfnFxsZKWFhYk8eMHj1arKysxNPT0+Czt1FLr59SKhET//abiIiIqJvgeZyIiIiIFGLhRERERKQQCyciIiIihVg4ERERESnEwomIiIhIIRZORERERAqxcCIiIiJSiIUTERERkUIsnIiox6isrMSkSZNgZ2cHBweHh7apVCrs379f0ZirVq0y+QVeich8sHAioi5RWVmJ+fPnw9PTE2q1Gu7u7njmmWeQlZXVYc+xadMmVFRU4PTp0zh37txD2yoqKhAVFaVozMWLF3dojACQlpamL+KIqHvpbeoAiKjnu3DhAkJDQ+Hg4ID169fD398fd+/exeHDhzFv3jycPXu2Q56nrKwMY8eOhZeXV4ttrq6uisfs06cP+vTp0yHxEVEPYPTV7YiIjBQVFSUDBw6UmpqaJtt++OEHERG5ePGiPPvss2JnZyd9+/aVX//6100uNrp//34JDAwUtVotQ4YMkVWrVukvkvzgBWtjY2ObbRP58eLb+/bt04976dIlmT59ujg6Ooqtra2MHTtWf/HPhIQEGTVqlEEcO3bskBEjRoharRZvb29JSUnRb2u8IPKePXvkqaeeEhsbGwkICJDjx4+LSPMXL228qC4RmT8ecSKiTlVVVYVDhw5h7dq1sLOza7LdwcEB9+7dw9SpU9GnTx/85z//QX19PebNm4dp06YhOzsbAPD5559j5syZ2LJlC5544gmUlZVh7ty5AICEhAScOHECM2fOhEajwTvvvAMbGxvcuXOnSduDampqEBYWhoEDB+LgwYNwdXXFqVOncO/evWbz+eCDDxAfH49t27YhMDAQ+fn5iIuLg52dHWJjY/X9VqxYgeTkZHh5eWHFihWIiYmBVqtFSEgINm/ejPj4eJSUlAAAj2gRdSMsnIioU2m1WogIRowY8dA+WVlZKCgoQHl5Odzd3QEA77//PkaOHIkTJ05g3LhxSExMxLJly/TFiaenJ9asWYPXX38dCQkJ6N+/P9RqNWxsbAy+imuu7X4ffvghrly5ghMnTqBfv34AgGHDhj001oSEBGzYsAHR0dEAgCFDhqCoqAjbt283KJwWL16MKVOmAAASExMxcuRIaLVajBgxAvb29lCpVEZ9ZUhE5oGFExF1KhFptU9xcTHc3d31RRMA+Pr6wsHBAcXFxRg3bhzOnDmDY8eOYe3atfo+DQ0NuH37Nmpra2Fra9um+E6fPo3AwEB90dSSmzdvoqysDHPmzEFcXJy+vb6+Hvb29gZ9AwIC9H+7ubkBAL7//vsWC0giMn8snIioU3l5eUGlUrV7AXhNTQ0SExP1R3ruZ21t3eZxm/v6rqUYAGDHjh0IDg422GZhYWFw39LSUv+3SqUCgId+/UdE3QcLJyLqVP369UNkZCRSUlKwYMGCJuucrl+/Dh8fH1y6dAmXLl3SH3UqKirC9evX4evrCwAYM2YMSkpKWvwarS0CAgLw3nvvoaqqqtWjTi4uLhgwYADOnz+PGTNmtPk5rays0NDQ0ObHE5Hp8DxORNTpUlJS0NDQgKCgIOzZswelpaUoLi7Gli1bMGHCBISHh8Pf3x8zZszAqVOnkJeXh5kzZyIsLAyPP/44ACA+Ph7vv/8+EhMTUVhYiOLiYqSnp2PlypXtii0mJgaurq745S9/iWPHjuH8+fPYs2cPcnJymu2fmJiIdevWYcuWLTh37hwKCgqQmpqKjRs3Kn7OwYMHo6amBllZWbh69Spqa2vblQMRdR0WTkTU6Tw9PXHq1Cn87Gc/w6JFi+Dn54dJkyYhKysL7777LlQqFQ4cOABHR0c8+eSTCA8Ph6enJ/7xj3/ox4iMjMQ///lPHDlyBOPGjcP48eOxadMmeHh4tCs2KysrHDlyBM7Oznj66afh7++PpKSkJl+9NXrxxRfx3nvvITU1Ff7+/ggLC0NaWhqGDBmi+DlDQkLw0ksvYdq0aejfvz/efvvtduVARF1HJUpWbhIRERERjzgRERERKcXCiYiIiEghFk5ERERECrFwIiIiIlKIhRMRERGRQiyciIiIiBRi4URERESkEAsnIiIiIoVYOBEREREpxMKJiIiISCEWTkREREQK/T+yyLCgTJxtMQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Coefficient', y='Feature', hue='Method', data=coef_combined, orient='h')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "4hs7Lw2FcgAS",
        "outputId": "f7d0b6c6-5061-467a-b7b6-393a648584c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Coefficient', ylabel='Feature'>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV, KFold\n",
        "import numpy as np\n",
        "# Define a range of alpha values to try\n",
        "alphas = np.logspace(-4, 2, 100)\n",
        "# Perform GridSearchCV\n",
        "param_grid = {'alpha': alphas}\n",
        "kf = KFold(n_splits=5, shuffle=True, random_state=42) # 5-fold cross-validation\n",
        "grid_search = GridSearchCV(model_lasso, param_grid, cv=kf, scoring='neg_mean_squared_error')\n",
        "grid_search.fit(X_train_st, y_train_st)\n",
        "# Get the best alpha from the grid search\n",
        "best_alpha = grid_search.best_params_['alpha']\n",
        "print(\"Best alpha:\", best_alpha)\n",
        "# Fit the Lasso model with the best alpha\n",
        "model_lasso_tuned = Lasso(alpha=best_alpha)\n",
        "model_lasso_tuned.fit(X_train_st, y_train_st)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 91
        },
        "id": "9XFAIh15cnnH",
        "outputId": "145844b2-5cf2-4865-f27d-2e5723aaac53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best alpha: 0.12328467394420659\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso(alpha=0.12328467394420659)"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(alpha=0.12328467394420659)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=0.12328467394420659)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coef_lasso_tuned = pd.DataFrame({\n",
        "'Feature': diabetes.feature_names,\n",
        "'Coefficient': model_lasso_tuned.coef_,\n",
        "'Method': 'Lasso (Tuned)'\n",
        "})\n",
        "# Concatenate DataFrames for visualization\n",
        "coef_combined = pd.concat([coef_combined, coef_lasso_tuned])"
      ],
      "metadata": {
        "id": "3kLczZqMcyG2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Coefficient', y='Feature', hue='Method', data=coef_combined, orient='h')\n",
        "plt.axvline(x=0, color='gray', linestyle='--'\n",
        ", linewidth=2) # Add a vertical line at y=0\n",
        "plt.title('Comparison of Coefficients: OLS vs Lasso Regression')\n",
        "plt.xlabel('Feature')\n",
        "plt.ylabel('Coefficient Value')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "ZxRuZxuKc1ng",
        "outputId": "4dda1f89-38e9-4443-984e-3b50e05d1c3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lnkW73Cfc8Zy"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}